//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                         FILE DETAILS
// Project          : Memory PassThrough for LM32
// File             : passthru.v
// Title            : Memory PassThrough Connection
// Dependencies     : system_conf.v
// Description      : Implements the logic to interface external Memory with 
//                    Wishbone bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 3.0
// Mod. Date        : May 16, 2011
// Changes Made     : Initial Creation
// =============================================================================

`include "system_conf.v"
module mpassthru 
  #(parameter MEM_WB_ADR_WIDTH = 32,
    parameter MEM_WB_DAT_WIDTH = 32
    )
   (
    // wishbone Memory signals
    input [MEM_WB_ADR_WIDTH-1:0] MEM_ADR_I,
    input [MEM_WB_DAT_WIDTH-1:0] MEM_DAT_I,
    input MEM_WE_I,
    input [MEM_WB_DAT_WIDTH/8-1:0] MEM_SEL_I,
    input MEM_STB_I,
    input MEM_CYC_I,
    input MEM_LOCK_I,
    input [2:0] MEM_CTI_I,
    input [1:0] MEM_BTE_I,
    output [MEM_WB_DAT_WIDTH-1:0] MEM_DAT_O,
    output MEM_ACK_O,
    output MEM_ERR_O,
    output MEM_RTY_O,
    // clk/reset   
    output clk,
    output rst,
    // external signals (Memory passthru)
    output [MEM_WB_ADR_WIDTH-1:0] mem_adr,
    output [MEM_WB_DAT_WIDTH-1:0] mem_master_data,
    input [MEM_WB_DAT_WIDTH-1:0] mem_slave_data,
    output mem_strb,
    output mem_cyc,
    input mem_ack,
    input mem_err,
    input mem_rty,
    output [MEM_WB_DAT_WIDTH/8-1:0] mem_sel,
    output mem_we,
    output [1:0] mem_bte,
    output [2:0] mem_cti,
    output mem_lock,
    //
    // others
    //
    input CLK_I,
    input RST_I
   );

        //----------------------------------------------------
        //
        // pass signals to an external entity (Memory-passthru)
        //
        //----------------------------------------------------
        assign      mem_adr         =   MEM_ADR_I;
        assign      mem_master_data =   MEM_DAT_I;
        assign      MEM_DAT_O         =   mem_slave_data;
        assign      mem_strb        =   MEM_STB_I;
        assign      mem_cyc         =   MEM_CYC_I;
        assign      MEM_ACK_O         =   mem_ack;
        assign      MEM_ERR_O         =   mem_err;
        assign      MEM_RTY_O         =   mem_rty;
        assign      mem_sel         =   MEM_SEL_I;
        assign      mem_we          =   MEM_WE_I;
        assign      mem_bte         =   MEM_BTE_I;
        assign      mem_cti         =   MEM_CTI_I;
        assign      mem_lock        =   MEM_LOCK_I;
        assign      clk             =   CLK_I;
        assign      rst             =   RST_I;

endmodule

