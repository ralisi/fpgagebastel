//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                         FILE DETAILS
// Project          : Memory PassThrough for LM32
// File             : memory_passthru.v
// Title            : Memory PassThrough 
// Dependencies     : system_conf.v
// Description      : Implements the logic to interface external Memory with 
//                    Wishbone bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 3.0
// Mod. Date        : May 16, 2011
// Changes Made     : Initial Creation
// =============================================================================

`include "system_conf.v"
module memory_passthru 
  #(parameter MEM_WB_ADR_WIDTH = 32,
    parameter MEM_WB_DAT_WIDTH = 32
    )
   (
    // wishbone memory signals
    input [MEM_WB_ADR_WIDTH-1:0] MEM_ADR_I,
    input [MEM_WB_DAT_WIDTH-1:0] MEM_DAT_I,
    input MEM_WE_I,
    input [MEM_WB_DAT_WIDTH/8-1:0] MEM_SEL_I,
    input MEM_STB_I,
    input MEM_CYC_I,
    input MEM_LOCK_I,
    input [2:0] MEM_CTI_I,
    input [1:0] MEM_BTE_I,
    output [MEM_WB_DAT_WIDTH-1:0] MEM_DAT_O,
    output MEM_ACK_O,
    output MEM_ERR_O,
    output MEM_RTY_O,
    
    // external signals
    output clk,
    output rst,
    output [MEM_WB_ADR_WIDTH-1:0] mem_adr,
    output [MEM_WB_DAT_WIDTH-1:0] mem_master_data,
    input [MEM_WB_DAT_WIDTH-1:0] mem_slave_data,
    output mem_strb,
    output mem_cyc,
    input mem_ack,
    input mem_err,
    input mem_rty,
    output [MEM_WB_DAT_WIDTH/8-1:0] mem_sel,
    output mem_we,
    output [1:0] mem_bte,
    output [2:0] mem_cti,
    output mem_lock,
    
    input CLK_I,
    input RST_I
   );


          // Instantiate the open cores module
          mpassthru 
		  #(.MEM_WB_ADR_WIDTH (MEM_WB_ADR_WIDTH),
		    .MEM_WB_DAT_WIDTH (MEM_WB_DAT_WIDTH))
			instantiate_passthru ( 

                // Connect Wishbone 
               .MEM_ADR_I(MEM_ADR_I),
               .MEM_DAT_I(MEM_DAT_I),
               .MEM_WE_I(MEM_WE_I),
               .MEM_SEL_I(MEM_SEL_I),
               .MEM_STB_I(MEM_STB_I),
               .MEM_CYC_I(MEM_CYC_I),
               .MEM_LOCK_I(MEM_LOCK_I),
               .MEM_CTI_I(MEM_CTI_I),
               .MEM_BTE_I(MEM_BTE_I),
               .MEM_DAT_O(MEM_DAT_O),
               .MEM_ACK_O(MEM_ACK_O),
               .MEM_ERR_O(MEM_ERR_O),
               .MEM_RTY_O(MEM_RTY_O),

                // Connect External signals
               .clk(clk),
               .rst(rst),
               .mem_adr(mem_adr),
               .mem_master_data(mem_master_data),
               .mem_slave_data(mem_slave_data),
               .mem_strb(mem_strb),
               .mem_cyc(mem_cyc),
               .mem_ack(mem_ack),
               .mem_err(mem_err),
               .mem_rty(mem_rty),
               .mem_sel(mem_sel),
               .mem_we(mem_we),
               .mem_bte(mem_bte),
               .mem_cti(mem_cti),
               .mem_lock(mem_lock),

               .CLK_I(CLK_I),
               .RST_I(RST_I));

endmodule
