//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                         FILE DETAILS
// Project          : Master PassThrough for LM32
// File             : dummy.v
// Title            : Master PassThrough Connection
// Dependencies     : system_conf.v
// Description      : Implements the logic to interface external master with 
//                    Wishbone bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 3.0
// Mod. Date        : Jun 16, 2008
// Changes Made     : Initial Creation
// =============================================================================

`include "system_conf.v"
module dummy 
  #(parameter M_WB_ADR_WIDTH = 32,
    parameter M_WB_DAT_WIDTH = 32
    )
   (
    // wishbone master signals
    output [M_WB_ADR_WIDTH-1:0] m_ADR_O,
    output [M_WB_DAT_WIDTH-1:0] m_DAT_O,
    output m_WE_O,
    output [M_WB_DAT_WIDTH/8-1:0] m_SEL_O,
    output m_STB_O,
    output m_CYC_O,
    output m_LOCK_O,
    output [2:0] m_CTI_O,
    output [1:0] m_BTE_O,
    input [M_WB_DAT_WIDTH-1:0] m_DAT_I,
    input m_ACK_I,
    input m_ERR_I,
    input m_RTY_I,
    
    // external signals (master passthru)
    input [M_WB_ADR_WIDTH-1:0] mstr_adr,
    input [M_WB_DAT_WIDTH-1:0] mstr_data_to_slv,
    input mstr_we,
    input [M_WB_DAT_WIDTH/8-1:0] mstr_sel,
    input mstr_stb,
    input mstr_cyc,
    input mstr_lock,
    input [2:0] mstr_cti,
    input [1:0] mstr_bte,
    output [M_WB_DAT_WIDTH-1:0] mstr_data_from_slv,
    output mstr_ack_from_slv,
    output mstr_err_from_slv,
    output mstr_rty_from_slv,
    output clk,
    output rst,
    //
    // others
    //
    input CLK_I,
    input RST_I);
   
   //----------------------------------------------------
   //
   // pass signals to an external entity (master-passthru)
   //
   //----------------------------------------------------
   assign      m_ADR_O                     = mstr_adr;
   assign      m_DAT_O                     = mstr_data_to_slv;
   assign      m_WE_O                      = mstr_we;
   assign      m_SEL_O                     = mstr_sel;
   assign      m_STB_O                     = mstr_stb;
   assign      m_CYC_O                     = mstr_cyc;
   assign      m_LOCK_O                    = mstr_lock;
   assign      m_CTI_O                     = mstr_cti;
   assign      m_BTE_O                     = mstr_bte;
   assign      mstr_data_from_slv          = m_DAT_I;
   assign      mstr_ack_from_slv           = m_ACK_I;
   assign      mstr_err_from_slv           = m_ERR_I;
   assign      mstr_rty_from_slv           = m_RTY_I;
   assign      clk                         = CLK_I;
   assign      rst                         = RST_I;

endmodule


